// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2022 08:14:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          digibot3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module digibot3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Collision;
reg Left;
reg Right;
// wires                                               
wire LDIR;
wire LEN;
wire RDIR;
wire REN;
wire Seg0;
wire Seg1;
wire Seg2;
wire Seg3;
wire Seg4;
wire Seg5;
wire Seg6;

// assign statements (if any)                          
digibot3 i1 (
// port map - connection between master ports and signals/registers   
	.Collision(Collision),
	.LDIR(LDIR),
	.Left(Left),
	.LEN(LEN),
	.RDIR(RDIR),
	.REN(REN),
	.Right(Right),
	.Seg0(Seg0),
	.Seg1(Seg1),
	.Seg2(Seg2),
	.Seg3(Seg3),
	.Seg4(Seg4),
	.Seg5(Seg5),
	.Seg6(Seg6)
);
initial 
begin 
#1000000 $finish;
end 

// Collision
always
begin
	Collision = 1'b0;
	Collision = #500000 1'b1;
	#500000;
end 

// Left
always
begin
	Left = 1'b0;
	Left = #250000 1'b1;
	#250000;
end 

// Right
always
begin
	Right = 1'b0;
	Right = #125000 1'b1;
	#125000;
end 
endmodule

